import socket
import threading
from concurrent.futures import ThreadPoolExecutor

def main():
    port = 1234
    try:
        global server_socket  
        server_socket = socket.socket()
        server_socket.bind(('0.0.0.0', port)) 
        server_socket.listen(5) 
        global serv_start
        serv_start = True

        global clients
        clients = []  # Liste des connexions clientes

        with ThreadPoolExecutor(max_workers=5) as executor:
            while serv_start:
                conn, address = server_socket.accept()
                print('Nouvelle connexion')
                clients.append(conn)  # Ajoute la nouvelle connexion à la liste
                executor.submit(handle_client, conn)

    except ConnectionAbortedError:
        print('La connexion a été coupée')
    except ConnectionRefusedError:
        print('La connexion a été refusée')
    except ConnectionResetError:
        print('La connexion a été réinitialisée')
    except OSError:
        pass
    else:
        server_socket.close()

def handle_client(conn):
    try:
        global flag, serv_start
        flag = False
        while not flag:
            received_message = conn.recv(1024).decode()
            print(f"Reçu du client : {received_message}")

            if received_message == 'arret':
                flag = True
                serv_start = False
                server_socket.close()
            elif received_message == 'bye':
                conn.close()
                clients.remove(conn)  # Retire la connexion fermée de la liste
                flag = True
            else:
                # Envoie le message à tous les clients
                broadcast(received_message, conn)

    except ConnectionAbortedError:
        print('La connexion a été coupée')
    except ConnectionResetError:
        print('La connexion a été réinitialisée')
    finally:
        conn.close()

def broadcast(message, sender_conn):
    for client_conn in clients:
        if client_conn != sender_conn:
            try:
                client_conn.send(message.encode())
            except Exception as e:
                print(f"Erreur lors de l'envoi au client : {e}")
                # Gérer les erreurs d'envoi si nécessaire
                pass

if __name__ == '__main__':
    main()

